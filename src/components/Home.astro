<div>
  <div
    id='hex-background'
    class='flex
		bg-darkSecondary-900
		h-screen
		w-full
		max-w-full
		min-h-screen
		justify-center
		items-center'
  >
    <div
      id='hex-grid'
      class='absolute
			bg-repeat
			bg-hexagon-pattern
			bg-[length:160px] md:bg-[length:200px]
			left-0
			top-0
			w-full
			h-full
			z-10'
    >
    </div>
  </div>

  <div
    id='hex-light'
    class='absolute
			
			bg-gradient-radial from-tertiary-600/80 via-tertiary-400/80 to-secondary-700
			top-2/4
			left-2/4
			w-80 h-80
			-translate-x-1/2 -translate-y-1/2
			z-0
			blur-3xl
			rounded-full
			animate-pulse'
  >
  </div>

  <script>
    // Find the grid and light elements.
    const hexLight = document.querySelector('#hex-light') as HTMLElement;
    const hexGrid = document.querySelector('#hex-grid') as HTMLElement;

    const handleLightMove = (userX: number, userY: number) => {
      // Get the boundaries of the hexGrid element.
      const hexGridRect = hexGrid.getBoundingClientRect();

      // Get the boundaries of the hexLight element.
      const hexLightRect = hexLight.getBoundingClientRect();

      // Check boundaries
      const isInsideXBoundary =
        userX >= hexGridRect.left &&
        userX + hexLightRect.width / 2 <= hexGridRect.right;
      const isInsideYBoundary =
        userY >= hexGridRect.top && userY <= hexGridRect.bottom;

      if (isInsideXBoundary) {
        hexLight.style.left = `${userX}px`;
      }
      if (isInsideYBoundary) {
        hexLight.style.top = `${userY}px`;
      }
      return isInsideXBoundary && isInsideYBoundary;
    };

    if (hexGrid && hexLight) {
      // Set a mousemove event listener on the grid element.
      // Then update the top and left of the light element to match the mouse position.
      hexGrid.addEventListener('mousemove', (event: MouseEvent) => {
        if (!handleLightMove(event.clientX, event.clientY)) {
          event.preventDefault();
        }
      });

      // Set a touch event listener on the grid element.
      // Then update the top and left of the light element to match the touch position.
      hexGrid.addEventListener('touchmove', (event: TouchEvent) => {
        const touchX = event.touches[0].clientX;
        const touchY = event.touches[0].clientY;
        if (!handleLightMove(touchX, touchY)) {
          event.preventDefault();
        }
      });
    }
  </script>
</div>
